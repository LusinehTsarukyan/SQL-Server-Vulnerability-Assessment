package Vul.controllers;

import Vul.SqlConnection;
import Vul.dto.EncryptData;
import Vul.dto.MaskData;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.*;

import java.sql.*;
import java.util.ArrayList;

@Controller
public class MainController {
    String url;
    String user;
    String password;

    @RequestMapping(value = "/main", method = RequestMethod.GET)
    String showMainPage(ModelMap model) {
        return "main";
    }

    @RequestMapping(value = "/connect", method = RequestMethod.POST)
    String connect(ModelMap model,
                   @RequestParam String system,
                   @RequestParam String address,
                   @RequestParam String user,
                   @RequestParam String password) {


        String database = "vul";
        if (system.equals("SQL Server")) {
            system = "jdbc:sqlserver";
        } else {
            model.put("msg", "The System supports only SQL Server yet. Try again.");
        }
        try (Connection conn = SqlConnection.ConnectDB(system + "://" + address + ";" + "database=" + database, user, password)) {
            url = system + "://" + address + ";" + "database=" + database;
            this.user = user;
            this.password = password;
            model.put("msg", "Connected to database successfully.");
        } catch (SQLException e) {
            model.put("msg", "Not Valid Input. Try again.");
        }
        return "msg";
    }

    @RequestMapping(value = "/vulAssassment", method = RequestMethod.GET)
    String vulAssassment(ModelMap model,ModelMap model1){
        try (Connection conn = SqlConnection.ConnectDB(url,user,password)) {
            String sql_process_order = "{call [dbo].[dba_vulnerabilityAssessmentReport](?,?,?)}";
            CallableStatement callableStatement;
            callableStatement = conn.prepareCall(sql_process_order);
            callableStatement.setString(1, "vul");
            callableStatement.setInt(2, 1);
            callableStatement.setString(3, null);
            
            ResultSet rs = callableStatement.executeQuery();
            rs.next();
            //callableStatement.getMoreResults();
            ResultSetMetaData rsmd = null;
            if (callableStatement != null) {
                rsmd = callableStatement.getMetaData();
            }
            int columnsNumber = 0;
            if (rsmd != null) {
                columnsNumber = rsmd.getColumnCount();
            }
            render(model, rs, columnsNumber);
        } catch (SQLException e) {
            model.put("error", "Problem with connecting to database.");
            e.printStackTrace();
            return "error";
        }
        return "vulAssassment";
    }

    @RequestMapping(value = "/gdprSensData", method = RequestMethod.GET)
    String sp_gdprSensData(ModelMap model){
        try (Connection conn = SqlConnection.ConnectDB(url,user,password)) {
            String sql_process_order = "{call [dbo].[dba_vulnerabilityAssessmentReport](?,?,?)}";
            CallableStatement callableStatement;
            callableStatement = conn.prepareCall(sql_process_order);
            callableStatement.setString(1, "vul");
            callableStatement.setString(2, null);
            callableStatement.setInt(3, 1);
            //int rows = callableStatement.executeUpdate();

            ResultSet rs = callableStatement.executeQuery();
            ResultSetMetaData rsmd = null;
            if (callableStatement != null) {
                rsmd = callableStatement.getMetaData();
            }
            int columnsNumber = 0;
            if (rsmd != null) {
                columnsNumber = rsmd.getColumnCount();
            }
            render(model, rs, columnsNumber);
        } catch (SQLException e) {
            model.put("error", "Problem with connecting to database.");
            e.printStackTrace();
            return "error";
        }
        return "gdprSensData";
    }

    @RequestMapping(value = "/mask", method = RequestMethod.PATCH)
    ResponseEntity<Object> mask(@RequestBody MaskData data){
        System.out.println(data.toString());
        try (Connection conn = SqlConnection.ConnectDB(url,user,password)) {

            String sql_process_order = "{call mask_data(?,?,?,?)}";
            CallableStatement callableStatement;
            callableStatement = conn.prepareCall(sql_process_order);
            callableStatement.setString(1, data.getDbName());
            callableStatement.setString(2, data.getSchemaName());
            callableStatement.setString(3, data.getTableName());
            callableStatement.setString(4, data.getColumnName());

            int rows = callableStatement.executeUpdate();
            System.out.println(rows + "rows have successfully been updated");
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return ResponseEntity.ok().build();
    }

    @RequestMapping(value = "/encrypt", method = RequestMethod.PATCH)
    ResponseEntity<Object> encrypt(@RequestBody EncryptData data){
        System.out.println(data.toString());
        try (Connection conn = SqlConnection.ConnectDB(url,user,password)) {

            String sql_process_order = "{call encryptColumnWithPassword(?,?,?,?,?)}";
            CallableStatement callableStatement;
            callableStatement = conn.prepareCall(sql_process_order);
            callableStatement.setString(1, data.getPassword());
            callableStatement.setString(2, data.getDbName());
            callableStatement.setString(3, data.getSchemaName());
            callableStatement.setString(4, data.getTableName());
            callableStatement.setString(5, data.getColumnName());

            int rows = callableStatement.executeUpdate();
            System.out.println(rows + "rows have successfully been updated");
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return ResponseEntity.ok().build();
    }

    @RequestMapping(value = "/helpFile", method = RequestMethod.GET)
    String sp_helpFile(ModelMap model) {
            try (Connection conn = SqlConnection.ConnectDB(url,user,password)) {
                Statement st = null;
                if (conn != null) {
                    st = conn.createStatement();
                }

                // execute the query, and get a java resultset
                ResultSet rs = null;
                if (st != null) {

                    rs = st.executeQuery("sp_helpfile");
                }
                ResultSetMetaData rsmd = null;
                if (rs != null) {
                    rsmd = rs.getMetaData();
                }
                int columnsNumber = 0;
                if (rsmd != null) {
                    columnsNumber = rsmd.getColumnCount();
                }
                render(model, rs, columnsNumber);
            } catch (SQLException e) {
                model.put("error", "Problem with connecting to database.");
                e.printStackTrace();
                return "error";
            }
        return "sp_helpFile";
        }

    @RequestMapping(value = "/sysLogIns", method = RequestMethod.GET)
    String sysLogIns(ModelMap model) {
        try (Connection conn = SqlConnection.ConnectDB(url,user,password)) {
            Statement st = null;
            if (conn != null) {
                st = conn.createStatement();
            }

            // execute the query, and get a java resultset
            ResultSet rs = null;
            if (st != null) {
                rs = st.executeQuery("select * from syslogins");
            }
            ResultSetMetaData rsmd = null;
            if (rs != null) {
                rsmd = rs.getMetaData();
            }
            int columnsNumber = 0;
            if (rsmd != null) {
                columnsNumber = rsmd.getColumnCount();
            }
            render(model, rs, columnsNumber);
        } catch (SQLException e) {
            model.put("error", "Problem with connecting to database.");
            return "error";
        }
        return "sysLogIns";
    }

    private void render(ModelMap model, ResultSet rs, int columnsNumber) throws SQLException {
        if (rs != null) {
            ArrayList<ArrayList<String>> listOLists = new ArrayList<ArrayList<String>>();
            while (rs.next()) {
                ArrayList<String> resultList = new ArrayList<>();
                for (int i = 1; i <= columnsNumber; i++) {
                    String columnValue = rs.getString(i);
                    resultList.add(columnValue);
                }
                listOLists.add(resultList);
            }
            model.put("resultList", listOLists);
        }
    }
}
