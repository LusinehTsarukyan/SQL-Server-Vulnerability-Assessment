package Vul.controllers;

import Vul.SqlConnection;
import org.bouncycastle.math.raw.Mod;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.sql.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
public class MainController {
    String url;
    String user;
    String password;

    @RequestMapping(value = "/main", method = RequestMethod.GET)
    String showMainPage(ModelMap model) {
        return "main";
    }

    @RequestMapping(value = "/connect", method = RequestMethod.POST)
    String connect(ModelMap model,
                   @RequestParam String system,
                   @RequestParam String address,
                   @RequestParam String user,
                   @RequestParam String password) {


        String database = "vul";
        if (system.equals("SQL Server")) {
            system = "jdbc:sqlserver";
        } else {
            model.put("msg", "The System supports only SQL Server yet. Try again.");
        }
        try (Connection conn = SqlConnection.ConnectDB(system + "://" + address + ";" + "database=" + database, user, password)) {
            url = system + "://" + address + ";" + "database=" + database;
            this.user = user;
            this.password = password;
            model.put("msg", "Connected to database successfully.");
        } catch (SQLException e) {
            model.put("msg", "Not Valid Input. Try again.");
        }
        return "msg";
    }

    @RequestMapping(value = "/gdprSensData", method = RequestMethod.GET)
    String sp_gdprSensData(ModelMap model){
        try (Connection conn = SqlConnection.ConnectDB(url,user,password)) {
            Statement st = null;
            if (conn != null) {
                st = conn.createStatement();
            }

            // execute the query, and get a java resultset
            ResultSet rs = null;
            if (st != null) {
                rs = st.executeQuery("sp_gdprsens");
            }
            ResultSetMetaData rsmd = null;
            if (rs != null) {
                rsmd = rs.getMetaData();
            }
            int columnsNumber = 0;
            if (rsmd != null) {
                columnsNumber = rsmd.getColumnCount();
            }
            render(model, rs, columnsNumber);
        } catch (SQLException e) {
            model.put("error", "Problem with connecting to database.");
            e.printStackTrace();
            return "error";
        }
        return "gdprSensData";
    }

//    @RequestMapping(value = "/mask", method = RequestMethod.POST)
//    String mask(ModelMap){
//        return "redirect:/gdprSensData";
//    }

    @RequestMapping(value = "/helpFile", method = RequestMethod.GET)
    String sp_helpFile(ModelMap model) {
            try (Connection conn = SqlConnection.ConnectDB(url,user,password)) {
                Statement st = null;
                if (conn != null) {
                    st = conn.createStatement();
                }

                // execute the query, and get a java resultset
                ResultSet rs = null;
                if (st != null) {

                    rs = st.executeQuery("sp_helpfile");
                }
                ResultSetMetaData rsmd = null;
                if (rs != null) {
                    rsmd = rs.getMetaData();
                }
                int columnsNumber = 0;
                if (rsmd != null) {
                    columnsNumber = rsmd.getColumnCount();
                }
                render(model, rs, columnsNumber);
            } catch (SQLException e) {
                model.put("error", "Problem with connecting to database.");
                e.printStackTrace();
                return "error";
            }
        return "sp_helpFile";
        }

    @RequestMapping(value = "/sysLogIns", method = RequestMethod.GET)
    String sysLogIns(ModelMap model) {
        try (Connection conn = SqlConnection.ConnectDB(url,user,password)) {
            Statement st = null;
            if (conn != null) {
                st = conn.createStatement();
            }

            // execute the query, and get a java resultset
            ResultSet rs = null;
            if (st != null) {
                rs = st.executeQuery("select * from syslogins");
            }
            ResultSetMetaData rsmd = null;
            if (rs != null) {
                rsmd = rs.getMetaData();
            }
            int columnsNumber = 0;
            if (rsmd != null) {
                columnsNumber = rsmd.getColumnCount();
            }
            render(model, rs, columnsNumber);
        } catch (SQLException e) {
            model.put("error", "Problem with connecting to database.");
            return "error";
        }
        return "sysLogIns";
    }

    private void render(ModelMap model, ResultSet rs, int columnsNumber) throws SQLException {
        if (rs != null) {
            ArrayList<ArrayList<String>> listOLists = new ArrayList<ArrayList<String>>();
            while (rs.next()) {
                ArrayList<String> resultList = new ArrayList<>();
                for (int i = 1; i <= columnsNumber; i++) {
                    String columnValue = rs.getString(i);
                    resultList.add(columnValue);
                }
                listOLists.add(resultList);
            }
            model.put("resultList", listOLists);
        }
    }
}
